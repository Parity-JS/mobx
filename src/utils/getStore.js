// Copyright 2015-2017 Parity Technologies (UK) Ltd.
// This file is part of Parity.

// Parity is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity.  If not, see <http://www.gnu.org/licenses/>.

import isClass from 'is-class';

import capitalize from './capitalize';
import createMobxStore from './createMobxStore';

const stores = {};

/**
 * Maps `rpcMethod:params` to a singleton mobx store
 * @param {String} str The string to work on
 */
const getStore = jsonRpcMethod => (...params) => {
  const [namespace, method] = jsonRpcMethod.split('_');
  const storeId = `${jsonRpcMethod}:${params.toString()}`; // TODO Maybe hash this to have a shorter id?

  // If this storeId doesn't exist, we create a singleton for it
  if (!stores[storeId]) {
    const namespaceStores = require(`../${namespace}`).default;
    // If the store is overridden in the namespace folder, then take that one
    // Else fallback to create a default store
    const factory =
      namespaceStores[`${capitalize(method)}Store`] || createMobxStore();

    // Putting singleton into stores[storeId]
    stores[storeId] = isClass(factory)
      ? factory // If it's already a Mobx store, we just return it
      : factory(jsonRpcMethod)(...params); // Else we return the store generated by the factory
  }

  return stores[storeId];
};

export default getStore;
